# src/database/models/vulnerability.py
from sqlalchemy import Column, Integer, String, Float, DateTime, Text, ForeignKey, Index, JSON, Boolean
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from src.database.models.base import Base

class VulnerabilityPattern(Base):
    """Knowledge base of vulnerability patterns"""
    __tablename__ = 'vulnerability_patterns'
    
    id = Column(Integer, primary_key=True, index=True)
    pattern_id = Column(String(50), unique=True, index=True)  # e.g., "SQL-001"
    name = Column(String(200), nullable=False)
    description = Column(Text)
    severity = Column(String(20), nullable=False)  # critical, high, medium, low
    
    # Classification
    cwe_id = Column(String(20), index=True)  # CWE-79, CWE-89, etc.
    owasp_category = Column(String(50))  # A01:2021, A02:2021, etc.
    
    # Detection rules
    languages = Column(JSON)  # ["python", "javascript", etc.]
    detection_patterns = Column(JSON)  # Regex patterns, AST patterns
    ai_features = Column(JSON)  # Features for ML model
    
    # Fix information
    fix_guidance = Column(Text)
    secure_alternatives = Column(JSON)
    references = Column(JSON)  # URLs to documentation
    
    # Metadata
    confidence_threshold = Column(Float, default=0.7)
    false_positive_rate = Column(Float)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # Relationships
    detections = relationship("VulnerabilityDetection", back_populates="pattern")
    
    # Indexes for performance
    __table_args__ = (
        Index('idx_pattern_severity', 'severity'),
        Index('idx_pattern_cwe', 'cwe_id'),
    )

class VulnerabilityDetection(Base):
    """Detected vulnerabilities from scans"""
    __tablename__ = 'vulnerability_detections'
    
    id = Column(Integer, primary_key=True, index=True)
    detection_id = Column(String(100), unique=True, index=True)
    
    # Location
    file_path = Column(String(500), nullable=False, index=True)
    line_start = Column(Integer, nullable=False)
    line_end = Column(Integer, nullable=False)
    column_start = Column(Integer)
    column_end = Column(Integer)
    code_snippet = Column(Text)
    
    # Detection details
    pattern_id = Column(Integer, ForeignKey('vulnerability_patterns.id'))
    severity = Column(String(20), nullable=False, index=True)
    confidence_score = Column(Float, nullable=False, index=True)
    
    # AI analysis
    ai_explanation = Column(Text)  # From LLM
    ai_confidence = Column(Float)
    embedding_vector = Column(JSON)  # Code embedding for similarity
    
    # Status tracking
    status = Column(String(20), default='open', index=True)  # open, confirmed, false_positive, fixed
    verified_by_user = Column(Boolean, default=False)
    suppressed = Column(Boolean, default=False)
    suppression_reason = Column(Text)
    
    # Scan context
    scan_id = Column(Integer, ForeignKey('scans.id'), index=True)
    project_id = Column(Integer, ForeignKey('projects.id'), index=True)
    
    # Timestamps
    detected_at = Column(DateTime, default=func.now())
    resolved_at = Column(DateTime)
    
    # Relationships
    pattern = relationship("VulnerabilityPattern", back_populates="detections")
    scan = relationship("Scan", back_populates="detections")
    project = relationship("Project", back_populates="detections")
    
    # Performance indexes
    __table_args__ = (
        Index('idx_detection_status_severity', 'status', 'severity'),
        Index('idx_detection_project_status', 'project_id', 'status'),
        Index('idx_detection_confidence', 'confidence_score'),
    )

class Scan(Base):
    """Scan execution records"""
    __tablename__ = 'scans'
    
    id = Column(Integer, primary_key=True, index=True)
    scan_id = Column(String(100), unique=True, index=True)
    
    # Scan configuration
    project_id = Column(Integer, ForeignKey('projects.id'), index=True)
    scan_type = Column(String(20))  # full, incremental, real-time
    languages_scanned = Column(JSON)
    files_scanned = Column(Integer, default=0)
    lines_scanned = Column(Integer, default=0)
    
    # Performance metrics
    start_time = Column(DateTime, default=func.now())
    end_time = Column(DateTime)
    duration_seconds = Column(Integer)
    
    # Results summary
    total_vulnerabilities = Column(Integer, default=0)
    critical_count = Column(Integer, default=0)
    high_count = Column(Integer, default=0)
    medium_count = Column(Integer, default=0)
    low_count = Column(Integer, default=0)
    
    # AI metrics
    ai_analysis_count = Column(Integer, default=0)
    average_confidence = Column(Float)
    
    # Relationships
    project = relationship("Project", back_populates="scans")
    detections = relationship("VulnerabilityDetection", back_populates="scan")

class Project(Base):
    """Projects being scanned"""
    __tablename__ = 'projects'
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(200), nullable=False, unique=True, index=True)
    description = Column(Text)
    repository_url = Column(String(500))
    
    # Configuration
    languages = Column(JSON)  # Primary languages
    scan_schedule = Column(String(50))  # cron expression
    active = Column(Boolean, default=True)
    
    # Security metrics
    security_score = Column(Float)  # 0-100
    last_scan_date = Column(DateTime)
    vulnerability_trend = Column(JSON)  # Historical data
    
    # Timestamps
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # Relationships
    scans = relationship("Scan", back_populates="project")
    detections = relationship("VulnerabilityDetection", back_populates="project")

class CVEIntelligence(Base):
    """CVE threat intelligence data"""
    __tablename__ = 'cve_intelligence'
    
    id = Column(Integer, primary_key=True, index=True)
    cve_id = Column(String(20), unique=True, index=True)  # CVE-2024-12345
    
    # CVE details
    description = Column(Text)
    severity_score = Column(Float)  # CVSS score
    severity_level = Column(String(20))
    
    # Affected systems
    affected_products = Column(JSON)
    affected_versions = Column(JSON)
    affected_languages = Column(JSON)
    
    # Detection
    detection_patterns = Column(JSON)
    exploitation_detected = Column(Boolean, default=False)
    
    # Metadata
    published_date = Column(DateTime)
    last_modified = Column(DateTime)
    references = Column(JSON)
    
    # Indexes
    __table_args__ = (
        Index('idx_cve_severity', 'severity_level'),
        Index('idx_cve_date', 'published_date'),
    )
